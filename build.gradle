plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'redlib'
version = '2.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    mybatisGenerator
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.31'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'eu.bitwalker:UserAgentUtils:1.21'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'com.mysql:mysql-connector-j'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    implementation 'org.apache.poi:poi:5.2.5'

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.projectlombok:lombok'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    mybatisGenerator files('lib/mybatis-generator-core-reform-1.3.5.jar')
    mybatisGenerator 'com.mysql:mysql-connector-j'
    mybatisGenerator 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "utf-8"
}

task mybatisGenerate {
    group 'mybatis generator'
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    doLast {
        ant.mbgenerator(
                overwrite: true,
                configfile: 'src/main/resources/generatorConfig.xml', verbose: true
        )
    }
}