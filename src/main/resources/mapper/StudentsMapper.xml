<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="redlib.backend.dao.StudentsMapper">
  <resultMap id="BaseResultMap" type="redlib.backend.model.Students">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="student_name" jdbcType="VARCHAR" property="studentName" />
    <result column="student_num" jdbcType="INTEGER" property="studentNum" />
    <result column="gender" jdbcType="TINYINT" property="gender" />
    <result column="parent_name" jdbcType="VARCHAR" property="parentName" />
    <result column="parent_tel" jdbcType="VARCHAR" property="parentTel" />
    <result column="class_id" jdbcType="INTEGER" property="classId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, student_name, student_num, gender, parent_name, parent_tel, class_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from students
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from students
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="redlib.backend.model.Students">
    insert into students (id, student_name, student_num, 
      gender, parent_name, parent_tel, 
      class_id)
    values (#{id,jdbcType=INTEGER}, #{studentName,jdbcType=VARCHAR}, #{studentNum,jdbcType=INTEGER}, 
      #{gender,jdbcType=TINYINT}, #{parentName,jdbcType=VARCHAR}, #{parentTel,jdbcType=VARCHAR}, 
      #{classId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="redlib.backend.model.Students">
    insert into students
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentName != null">
        student_name,
      </if>
      <if test="studentNum != null">
        student_num,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="parentName != null">
        parent_name,
      </if>
      <if test="parentTel != null">
        parent_tel,
      </if>
      <if test="classId != null">
        class_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentName != null">
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentNum != null">
        #{studentNum,jdbcType=INTEGER},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=TINYINT},
      </if>
      <if test="parentName != null">
        #{parentName,jdbcType=VARCHAR},
      </if>
      <if test="parentTel != null">
        #{parentTel,jdbcType=VARCHAR},
      </if>
      <if test="classId != null">
        #{classId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="redlib.backend.model.Students">
    update students
    <set>
      <if test="studentName != null">
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentNum != null">
        student_num = #{studentNum,jdbcType=INTEGER},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=TINYINT},
      </if>
      <if test="parentName != null">
        parent_name = #{parentName,jdbcType=VARCHAR},
      </if>
      <if test="parentTel != null">
        parent_tel = #{parentTel,jdbcType=VARCHAR},
      </if>
      <if test="classId != null">
        class_id = #{classId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="redlib.backend.model.Students">
    update students
    set student_name = #{studentName,jdbcType=VARCHAR},
      student_num = #{studentNum,jdbcType=INTEGER},
      gender = #{gender,jdbcType=TINYINT},
      parent_name = #{parentName,jdbcType=VARCHAR},
      parent_tel = #{parentTel,jdbcType=VARCHAR},
      class_id = #{classId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="count" resultType="integer">
    select count(*) from students
    where 1
      <if test="studentName != null">
        and student_name like #{studentName}
      </if>
      <if test="studentNum > 0">
        and student_num = #{studentNum}
      </if>
      <if test="gender != null">
        and gender = #{gender}
      </if>
      <if test="classId > 0">
        and class_id = #{classId}
      </if>
  </select>

  <select id="list" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from students
    where 1
    <if test="queryDTO.studentName != null">
      and student_name like #{queryDTO.studentName}
    </if>
    <if test="queryDTO.studentNum > 0">
      and student_num = #{queryDTO.studentNum}
    </if>
    <if test="queryDTO.gender != null">
      and gender = #{queryDTO.gender}
    </if>
    <if test="queryDTO.classId > 0">
      and class_id = #{queryDTO.classId}
    </if>
    <if test="queryDTO.orderBy != null and queryDTO.orderBy != 'student_name asc' and queryDTO.orderBy != 'student_name desc'">
      order by ${queryDTO.orderBy}
    </if>
    <if test="queryDTO.orderBy == 'student_name asc' ">
      order by convert(student_name using gbk) collate gbk_chinese_ci asc
    </if>
    <if test="queryDTO.orderBy == 'student_name desc' ">
      order by convert(student_name using gbk) collate gbk_chinese_ci desc
    </if>
    <if test="queryDTO.orderBy == null">
      order by id asc
    </if>
    limit #{offset}, #{limit}
  </select>

  <!-- 批量删除 -->
  <update id="deleteByCodes">
    delete from students
    where id in
    <foreach close=")" collection="codeList" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </update>

  <select id="selectByStudentNum" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from students
    where student_num = #{studentNum,jdbcType=INTEGER}
  </select>

  <select id="listNumToNameMaps" resultType="java.util.Map">
    select student_num,student_name
    from students
    order by student_num asc
  </select>
</mapper>